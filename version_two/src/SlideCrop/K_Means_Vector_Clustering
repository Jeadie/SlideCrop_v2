def closest_index(ndarray, value):
    return np.argmin(np.abs(ndarray-value))

import scipy.ndimage as nd
import numpy as np
import matplotlib.pyplot as plt
K_Clusters = 10
BGPCOUNT = 3
image = nd.imread("E:/download.jpg")
x_dim = image.shape[0]
y_dim = image.shape[1]

# mean intensity for each channel
# Averaged across axis separately. Shape = (x,y,3) -> (x -> 3) -> (1,3)
channel_mean_vector  = np.mean(np.mean(image, axis =1),axis =0 )


# Create a image vector with pixel values from the 2D corners of all channels. Used as a background intensity mean.
background_vector = np.zeros((2*BGPCOUNT,2*BGPCOUNT,3))
background_vector[0:BGPCOUNT, 0:BGPCOUNT, :] = image[0:BGPCOUNT, 0:BGPCOUNT, :]
background_vector[0:BGPCOUNT, BGPCOUNT:2*BGPCOUNT, :] = \
    image[0:BGPCOUNT, y_dim - BGPCOUNT:y_dim, :]

background_vector[BGPCOUNT:2*BGPCOUNT, 0:BGPCOUNT, :] = \
    image[x_dim - BGPCOUNT:x_dim, 0:BGPCOUNT, :]
background_vector[BGPCOUNT:2*BGPCOUNT, BGPCOUNT:2*BGPCOUNT, :] = \
    image[x_dim - BGPCOUNT:x_dim, y_dim - BGPCOUNT:y_dim, :]

background_channel_mean_vector = np.mean(np.mean(background_vector, axis =1),axis =0 )


#Choose channel for clustering based on maximum background-average intensity difference.
max_difference_channel = np.abs(background_channel_mean_vector - channel_mean_vector)
clustering_channel = np.argmax(max_difference_channel)
channel_image = image[:,:,clustering_channel]
index_image = 0* channel_image[:,:]
print("shape: {}".format(channel_image.shape))
print("shape: {}".format(index_image.shape))
cluster_vector = np.linspace(np.min(channel_image), np.max(channel_image), num = K_Clusters)
cluster_temp_vector = cluster_vector[:]
# Set initial background, Ub and foreground Uo  intensity means as averages previously found.
print("min {}, max{}, {}".format(np.min(channel_image) ,np.max(channel_image), cluster_temp_vector))

for iter in range(20):
    for row in range(channel_image.shape[0]):
        for col in range(channel_image.shape[1]):
            index_image[row, col] = closest_index(cluster_vector,
                                                  channel_image[row, col])

    for k in range(K_Clusters):
        cluster_temp_vector[k] = np.mean(channel_image[np.where(index_image == k)])
    print("\nIteration {}".format(iter))
    print("cluster_vector: {}".format(cluster_vector))
    print("cluster_temp_vector: {}".format(cluster_temp_vector))
    cluster_vector = cluster_temp_vector
