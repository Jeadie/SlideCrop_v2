import scipy.ndimage as nd
import numpy as np
import matplotlib.pyplot as plt
K_Clusters = 5
BGPCOUNT = 40
SENSITIVITY_THRESHOLD = 0.01
image = nd.imread("E:/test1.jpg")
x_dim = image.shape[0]
y_dim = image.shape[1]

if image.ndim == 3:
    # mean intensity for each channel
    # Averaged across axis separately. Shape = (x,y,3) -> (x -> 3) -> (1,3)
    channel_mean_vector  = np.mean(np.mean(image, axis =1),axis =0 )

    #  Find x & y indices to for the four corner squares of size BGPCOUNT * BGPCOUNT
    background_index_x_list = []
    background_index_y_list = []
    for i in range(BGPCOUNT):
        background_index_x_list.append(i);
        background_index_y_list.append(i);
        background_index_x_list.append(x_dim - (i+1));
        background_index_y_list.append(y_dim - (i+1));

    # Create a image vector with pixel values from the 2D corners of all channels. Used as a background intensity mean.
    background_vector = image[background_index_x_list, background_index_y_list, :];

    background_channel_mean_vector = np.mean(np.mean(background_vector, axis =1),axis =0 )


    #Choose channel for clustering based on maximum background-average intensity difference.
    max_difference_channel = np.abs(background_channel_mean_vector - channel_mean_vector)
    clustering_channel = np.argmax(max_difference_channel)
    channel_image = image[:,:,clustering_channel]
else:
    channel_image = image.copy()
histogram = np.zeros((256))

for i in channel_image:
    histogram[i] +=1


thresh = 255
new_thresh = 128

# Mean value of pixels below and above threshold
below_mean = 0
above_mean = 0


while(new_thresh != thresh):
    thresh = new_thresh
    print("Threshold: {}\n".format(thresh))

    # Find mean below the threshold
    count = 0
    for i in range(thresh):
        below_mean += i * histogram[i]
        count += histogram[i]
    below_mean /= count

    #  Find mean above the threshold
    count = 0
    for i in range(thresh, 255):
        above_mean += i * histogram[i]
        count += histogram[i]
    above_mean /= count

    #  New threshold is equidistant between the new means.
    new_thresh = int((above_mean + below_mean) / 2)

print("Threshold: {}\n".format(new_thresh))


